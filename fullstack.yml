project:
  name: "Avila"
  description: "Projeto full-stack com Django no back-end e React + Vite no front-end. Modular, escalável e reutilizável, com foco em MVP funcional para autenticação e gerenciamento de contas a pagar no primeiro estágio. O sistema deve ser multitenant sem subdomínio. No futuro serão adicionadas mais funcionalidades, como conexão com WhatsApp, integração com pagamentos, relatórios, gestão de clientes, produtos e vendas, RH, etc."

backend:
  framework: "Django"
  multitenant:
    enabled: true
    method: "Sem subdomínio, cada usuário ou empresa terá seu tenant isolado via campo de identificação no banco (ex: company_id)"
  structure:
    backend/:
      description: "Configurações do projeto"
      files:
        - settings.py
        - urls.py
        - wsgi.py
    apps/:
      accounts/:
        description: "Gerenciamento de usuários e autenticação"
        files:
          - models.py
          - serializers.py
          - views.py
          - urls.py
      contas/:
        description: "Gerenciamento de contas a pagar"
        files:
          - models.py
          - serializers.py
          - views.py
          - urls.py
    root_files:
      - manage.py
      - requirements.txt
      - Dockerfile
  api_endpoints:
    accounts:
      login:
        method: "POST"
        url: "/api/accounts/login/"
      logout:
        method: "POST"
        url: "/api/accounts/logout/"
      auth: "JWT ou Token"
    contas:
      create:
        method: "POST"
        url: "/api/contas/"
      list:
        method: "GET"
        url: "/api/contas/"
      baixa:
        method: "PATCH"
        url: "/api/contas/<id>/baixar/"
  best_practices:
    - "Separar apps accounts e contas com models, serializers, views e urls próprios."
    - "Preparado para adição de novos processos sem quebrar código existente."
    - "Estrutura modular e reutilizável."
    - "Suporte a multitenancy via campo de identificação no banco, sem uso de subdomínios."

frontend:
  framework: "React + Vite"
  structure:
    src/:
      main_file: "main.jsx"
      app_file: "App.jsx"
      pages/:
        - Login.jsx
        - Dashboard.jsx
        - AddContasPagar.jsx
      components/:
        - Input.jsx
        - Button.jsx
        - CardConta.jsx
        - ModalBaixa.jsx
        - Navbar.jsx
      services/:
        - api.js: "Axios/fetch centralizado"
        - contasService.js
      context/:
        - AuthContext.jsx: "Gerenciamento global de autenticação e tenant atual"
    public/: "Arquivos públicos"
  best_practices:
    - "Componentes reutilizáveis para facilitar expansão futura."
    - "Centralizar chamadas HTTP em services."
    - "State management com Context API ou outra solução leve."
    - "Gerenciar tenant atual no front-end, enviando tenant_id em todas as requisições."

mvp_flow:
  login: "Tela de login com autenticação JWT/Token, definindo o tenant atual"
  dashboard_contas_pagar:
    - "Criar conta a pagar"
    - "Listar contas a pagar em cards ou tabela filtradas pelo tenant"
    - "Dar baixa nas contas com modal ou botão direto na lista"

development_notes:
  local_development:
    - "Rodar Django: python manage.py runserver (porta 8000)"
    - "Rodar React: npm run dev (porta 5173)"
    - "Gerenciar CORS para comunicação front-end/back-end"
    - "Garantir que todas as queries e APIs respeitem o tenant atual"
  future_docker:
    - "Ajustar variáveis de ambiente"
    - "Alterar host do front-end para container do back-end"
    - "Fazer build do front-end e servir arquivos estáticos"
    - "Mapear portas do container para host"
    - "Garantir isolamento de dados por tenant nos containers"
